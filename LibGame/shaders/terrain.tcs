#version 460 core

// Tessellation control shader (TCS) for tessellating a quad
// This shader calculates tessellation levels based on the distance of vertices from the camera
// It uses a tessellation factor that is interpolated based on the distance of the vertices
// to the camera in view space. The tessellation levels are set for both outer and inner tessellation.
// The outer tessellation levels are set based on the closest vertex on each edge, while the inner tessellation levels are set based on the maximum of the outer tessellation levels.
// The shader also passes texture coordinates to the tessellation evaluation shader.
// The shader uses a fixed tessellation level range defined by iMinTessLevel and iMaxTessLevel.

layout (vertices = 4) out;

in vec2 Tex[];
out vec2 TexTcs[];

uniform mat4 mat4View;

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

    TexTcs[gl_InvocationID] = Tex[gl_InvocationID];

    // Step 1: transform the vertex to view space
    vec4 ViewSpacePos00 = mat4View * gl_in[0].gl_Position;
    vec4 ViewSpacePos01 = mat4View * gl_in[1].gl_Position;
    vec4 ViewSpacePos10 = mat4View * gl_in[2].gl_Position;
    vec4 ViewSpacePos11 = mat4View * gl_in[3].gl_Position;

    // Step 2: calculate the length of the view space vector to get the distance
    float fLen00 = length(ViewSpacePos00.xyz);
    float fLen01 = length(ViewSpacePos01.xyz);
    float fLen10 = length(ViewSpacePos10.xyz);
    float fLen11 = length(ViewSpacePos11.xyz);

    const float MIN_DISTANCE = 1;
    const float MAX_DISTANCE = 2000;

    // Step 3: calculate the tessellation factor based on the distance [0, 1]
    float fDistance00 = clamp((fLen00 - MIN_DISTANCE) / (MAX_DISTANCE - MIN_DISTANCE), 0.0, 1.0);
    float fDistance01 = clamp((fLen01 - MIN_DISTANCE) / (MAX_DISTANCE - MIN_DISTANCE), 0.0, 1.0);
    float fDistance10 = clamp((fLen10 - MIN_DISTANCE) / (MAX_DISTANCE - MIN_DISTANCE), 0.0, 1.0);
    float fDistance11 = clamp((fLen11 - MIN_DISTANCE) / (MAX_DISTANCE - MIN_DISTANCE), 0.0, 1.0);

    // Step 4: invert the tessellation factor
    float fTessFactor00 = 1.0 - fDistance00;
    float fTessFactor01 = 1.0 - fDistance01;
    float fTessFactor10 = 1.0 - fDistance10;
    float fTessFactor11 = 1.0 - fDistance11;

    // Step 5: interpolate edge tessellation level based on the closest vertex on each edge
    const int iMinTessLevel = 1;
    const int iMaxTessLevel = 7;

    float fTessLevel0 = mix(iMinTessLevel, iMaxTessLevel, min(fTessFactor10, fTessFactor00));
    float fTessLevel1 = mix(iMinTessLevel, iMaxTessLevel, min(fTessFactor00, fTessFactor01));
    float fTessLevel2 = mix(iMinTessLevel, iMaxTessLevel, min(fTessFactor01, fTessFactor11));
    float fTessLevel3 = mix(iMinTessLevel, iMaxTessLevel, min(fTessFactor11, fTessFactor10));

    // Step 6: set the outer edge tessellation levels
	gl_TessLevelOuter[0] = fTessLevel0;
    gl_TessLevelOuter[1] = fTessLevel1;
    gl_TessLevelOuter[2] = fTessLevel2;
	gl_TessLevelOuter[3] = fTessLevel3;

    // Step 7: set the inner tessellation levels
    gl_TessLevelInner[0] = max(fTessLevel1, fTessLevel3);
    gl_TessLevelInner[1] = max(fTessLevel0, fTessLevel2);
}
