#include "stdafx.h"
#include "utils.h"

/**
 * RandomFloat: Generates a random floating-point number between 0.0 and 1.0.
 *
 * This function uses the system's random number generator to produce a random
 * integer and scales it to a floating-point value between 0.0 and 1.0.
 *
 * @return A random floating-point number between 0.0 and 1.0.
 */
float RandomFloat()
{
    /* Maximum possible value of random integer */
    float Max = RAND_MAX;

    /* Return the generated random float */
    return ((float)RANDOM() / Max);
}

/**
 * RandomInteger: Generates a random integer.
 *
 * This function utilizes a platform-specific random number generator (RANDOM)
 * to produce a random integer.
 *
 * @return A random integer generated by the system's random number generator.
 */
int RandomInteger()
{
    /* Return the generated random integer */
    return (RANDOM());
}

/**
 * RandomFloatRangeF: Generates a random float within a specified range.
 *
 * This function takes a start and end value and returns a random float
 * between those values, inclusive. It handles edge cases like empty ranges
 * and reversed ranges, and provides informative error messages.
 *
 * Parameters:
 *   - Start: The lower bound of the range.
 *   - End: The upper bound of the range.
 *   - file: The file name where the function is called.
 *   - line: The line number where the function is called.
 *
 * @return A random float within the specified range, or the start value if the range is empty.
 */
float RandomFloatRangeF(float Start, float End, const char* file, int line)
{
    /*** Return Start if the range is 0 ***/
    if (End == Start)
    {
        return Start;
    }

    /*** If the minimum value is bigger than the maximum value ***/
    if (Start > End)
    {
        float temp = Start; /* Store the value of Start temporarily */

        /*** Print a warning in stderr to notify about the swapped values ***/
        fprintf(stderr, "RandomFloatRange(): first argument is bigger than second argument %f -> %f, file: %s line: %d", Start, End, file, line);

        /*** Swap the values to correct the range ***/
        Start = End;
        End = temp;
    }

    /* Calculate the difference between Start and End */
    float Delta = End - Start;

    /* Generate the random value in the range */
    float RandomValue = RandomFloat() * Delta + Start;

    /* Return the generated random value */
    return RandomValue;
}

/**
 * RandomIntegerRangeI: Generates a random integer within a specified range.
 *
 * This function takes a start and end value and returns a random integer
 * between those values, inclusive. It handles edge cases like empty ranges
 * and reversed ranges, and provides informative error messages.
 *
 * Parameters:
 *   - Start: The lower bound of the range.
 *   - End: The upper bound of the range.
 *   - file: The file name where the function is called.
 *   - line: The line number where the function is called.
 *
 * @return A random integer within the specified range, or the start value if the range is empty.
 */
int RandomIntegerRangeI(int Start, int End, const char* file, int line)
{
    /*** Return Start if the range is 0 ***/
    if (End == Start)
    {
        return Start;
    }

    /*** If the minimum value is bigger than the maximum value ***/
    if (Start > End)
    {
        int temp = Start; /* Store the value of Start temporarily */

        /*** Print a warning in stderr to notify about the swapped values ***/
        fprintf(stderr, "RandomIntegerRange(): first argument is bigger than second argument %d -> %d, file: %s line: %d", Start, End, file, line);

        /*** Swap the values to correct the range ***/
        Start = End;
        End = temp;
    }

    /* Calculate the difference between Start and End */
    int Delta = End - Start + 1;
    int RandomValue = 0;

    /*** Make Sure we are not going to divide by 0 ***/
    if (Delta != 0)
    {
        /* Generate the random value in the range */
        RandomValue = RandomInteger() % Delta + Start;
    }
    else
    {
        /* Print the division Error to the output */
        fprintf(stderr, "divide by zero file: %s line: %d", file, line);
    }

    /* Return the generated random value */
    return RandomValue;
}

int CalculateNextPowerOfTwo(int iNum)
{
    int iRet = 1;

    if (iNum == 1)
    {
        return (2);
    }

    while (iRet < iNum)
    {
        iRet = iRet * 2;
    }

    return (iRet);
}

bool IsPointInsideViewFrustum(const SVector3Df& v3Point, const CMatrix4Df& matViewProj)
{
    SVector4Df v4Point(v3Point, 1.0f);

    SVector4Df v4ClipSpacePoint = matViewProj * v4Point;

    bool IsInsideViewFrustum = (
        (v4ClipSpacePoint.x <= v4ClipSpacePoint.w) &&
        (v4ClipSpacePoint.x >= -v4ClipSpacePoint.w) &&
        (v4ClipSpacePoint.y <= v4ClipSpacePoint.w) &&
        (v4ClipSpacePoint.y >= -v4ClipSpacePoint.w) &&
        (v4ClipSpacePoint.z <= v4ClipSpacePoint.w) &&
        (v4ClipSpacePoint.z >= -v4ClipSpacePoint.w));

    return (IsInsideViewFrustum);
}

#include <fstream>

bool ReadFile(const char* pFileName, std::string& outFile)
{
    std::ifstream f(pFileName);

    bool ret = false;

    if (f.is_open())
    {
        std::string line;
        while (getline(f, line))
        {
            outFile.append(line);
            outFile.append("\n");
        }

        f.close();

        ret = true;
    }
    else
    {
        sys_err("Error Trying to OpenFile: %s", pFileName);
    }

    return ret;
}
